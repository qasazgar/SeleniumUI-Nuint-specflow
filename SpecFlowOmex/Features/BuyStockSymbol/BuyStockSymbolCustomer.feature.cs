// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowOmex.Features.BuyStockSymbol
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BuyStockSymbolCustomer")]
    public partial class BuyStockSymbolCustomerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BuyStockSymbolCustomer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/BuyStockSymbol", "BuyStockSymbolCustomer", "\t\t By Customer\r\n\t\t I Want Edit Buy  one Stock Symbol خساپا  \t\r\n\t\tso   Edit Buy st" +
                    "ock symbol with amounts and numbers in different time periods", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01)Buy stock symbol  with a price and a  number")]
        [NUnit.Framework.CategoryAttribute("GotoClient")]
        [NUnit.Framework.CategoryAttribute("LogoutClient")]
        [NUnit.Framework.CategoryAttribute("BuyMin")]
        [NUnit.Framework.CategoryAttribute("Positivetest")]
        [NUnit.Framework.TestCaseAttribute("min", "min", "0", "0", "روز", null)]
        [NUnit.Framework.TestCaseAttribute("min", "max", "0", "0", "انجام و حذف", null)]
        [NUnit.Framework.TestCaseAttribute("max", "min", "0", "0", "معتبر تا لغو", null)]
        [NUnit.Framework.TestCaseAttribute("max", "max", "0", "0", "معتبر تا تاریخ", null)]
        public virtual void _01BuyStockSymbolWithAPriceAndANumber(string price, string number, string plusprice, string plusnumber, string timerange, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GotoClient",
                    "LogoutClient",
                    "BuyMin",
                    "Positivetest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("plusprice", plusprice);
            argumentsOfScenario.Add("plusnumber", plusnumber);
            argumentsOfScenario.Add("timerange", timerange);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01)Buy stock symbol  with a price and a  number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("LoginUser Customer With Username 0153540664 And Password TseTab.ir123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And("Search Stock Symbol Client  وپست", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("Select Advanced panel type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("Select Time range type Cleint {0}", timerange), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("order the stock symbol IRO1BPST0001 Enter the {0}imum price plus {1} and the {2}i" +
                            "mum number plus {3}  Client", price, plusprice, number, plusnumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.When("Save stock symbol Buy order Customer information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("The result is that the customer must buy the shares of the stock symbol And Show " +
                        "massage سفارش با موفقیت ثبت شد", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02)Edit Buy stock symbol  with a price and a  number")]
        [NUnit.Framework.CategoryAttribute("GotoClient")]
        [NUnit.Framework.CategoryAttribute("LogoutClient")]
        [NUnit.Framework.CategoryAttribute("Buy")]
        [NUnit.Framework.CategoryAttribute("EditOrderNumber")]
        [NUnit.Framework.CategoryAttribute("Positivetest")]
        [NUnit.Framework.TestCaseAttribute("تعداد", "min", "max", "0", "-2", null)]
        [NUnit.Framework.TestCaseAttribute("تعداد", "max", "min", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("قیمت", "min", "max", "-2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("قیمت", "max", "min", "2", "0", null)]
        public virtual void _02EditBuyStockSymbolWithAPriceAndANumber(string typeEdit, string editprice, string editnumber, string editPlusprice, string editPlusnumber, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GotoClient",
                    "LogoutClient",
                    "Buy",
                    "EditOrderNumber",
                    "Positivetest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TypeEdit", typeEdit);
            argumentsOfScenario.Add("Editprice", editprice);
            argumentsOfScenario.Add("Editnumber", editnumber);
            argumentsOfScenario.Add("EditPlusprice", editPlusprice);
            argumentsOfScenario.Add("EditPlusnumber", editPlusnumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02)Edit Buy stock symbol  with a price and a  number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("LoginUser Customer With Username 0153540664 And Password TseTab.ir123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.And("Search Stock Symbol Client  وپست", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("Editing {0} order the stock symbol IRO1BPST0001 Enter the {1}imum price plus {2} " +
                            "and the {3}imum number plus {4}  Client", typeEdit, editprice, editPlusprice, editnumber, editPlusnumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.When("Edit order Bought shares of the symbol", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("The result is that the customer must buy the shares of the stock symbol And Show " +
                        "massage ویرایش سفارش با موفقیت ثبت شد", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02)Delete Buy stock symbol  with a price and a  number")]
        [NUnit.Framework.CategoryAttribute("GotoClient")]
        [NUnit.Framework.CategoryAttribute("LogoutClient")]
        [NUnit.Framework.CategoryAttribute("Buy")]
        [NUnit.Framework.CategoryAttribute("inTheDay")]
        [NUnit.Framework.CategoryAttribute("EditOrderNumber")]
        [NUnit.Framework.CategoryAttribute("Positivetest")]
        public virtual void _02DeleteBuyStockSymbolWithAPriceAndANumber()
        {
            string[] tagsOfScenario = new string[] {
                    "GotoClient",
                    "LogoutClient",
                    "Buy",
                    "inTheDay",
                    "EditOrderNumber",
                    "Positivetest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02)Delete Buy stock symbol  with a price and a  number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("LoginUser Customer With Username 0153540664 And Password TseTab.ir123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.And("Search Stock Symbol Client  وپست", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.When("Delete order Bought shares of the symbol", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.Then("the result should Delete Buy shares of the symbol And Show Massage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Computational investigation of purchasing power and value in buying from a stock " +
            "symbol")]
        [NUnit.Framework.CategoryAttribute("GotoClient")]
        [NUnit.Framework.CategoryAttribute("LogoutClient")]
        [NUnit.Framework.CategoryAttribute("Buy")]
        [NUnit.Framework.CategoryAttribute("Positivetest")]
        [NUnit.Framework.TestCaseAttribute("min", "min", "0", "0", "روز", null)]
        public virtual void ComputationalInvestigationOfPurchasingPowerAndValueInBuyingFromAStockSymbol(string price, string number, string plusprice, string plusnumber, string timerange, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GotoClient",
                    "LogoutClient",
                    "Buy",
                    "Positivetest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("plusprice", plusprice);
            argumentsOfScenario.Add("plusnumber", plusnumber);
            argumentsOfScenario.Add("timerange", timerange);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Computational investigation of purchasing power and value in buying from a stock " +
                    "symbol", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
 testRunner.Given("LoginUser Customer With Username 0153540664 And Password TseTab.ir123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
 testRunner.And("Search Stock Symbol Client  وپست", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And(string.Format("order the stock symbol IRO1BPST0001 Enter the {0}imum price plus {1} and the {2}i" +
                            "mum number plus {3}  Client", price, plusprice, number, plusnumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.When("Get text And Assert And Save stock symbol Buy order Customer information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.Then("The result is that the customer must buy the shares of the stock symbol And Show " +
                        "massage ویرایش سفارش با موفقیت ثبت شد", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is not possible to buy a stock symbol with a price or quantity outside the ran" +
            "ge")]
        [NUnit.Framework.CategoryAttribute("GotoClient")]
        [NUnit.Framework.CategoryAttribute("LogoutClient")]
        [NUnit.Framework.CategoryAttribute("NotBuy")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.TestCaseAttribute("min", "max", "1", "1", "انجام و حذف", "قیمت در بازه مجاز نیست", "تعداد در بازه مجاز نیست", null)]
        [NUnit.Framework.TestCaseAttribute("max", "min", "-1", "-1", "معتبر تا لغو", "قیمت در بازه مجاز نیست", "تعداد در بازه مجاز نیست", null)]
        public virtual void ItIsNotPossibleToBuyAStockSymbolWithAPriceOrQuantityOutsideTheRange(string price, string number, string plusprice, string plusnumber, string timerange, string textmessageOutOfRangePrice, string textmessageOutOfRangeNumber, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GotoClient",
                    "LogoutClient",
                    "NotBuy",
                    "NegativeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("plusprice", plusprice);
            argumentsOfScenario.Add("plusnumber", plusnumber);
            argumentsOfScenario.Add("timerange", timerange);
            argumentsOfScenario.Add("textmessageOutOfRangePrice", textmessageOutOfRangePrice);
            argumentsOfScenario.Add("textmessageOutOfRangeNumber", textmessageOutOfRangeNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is not possible to buy a stock symbol with a price or quantity outside the ran" +
                    "ge", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given("LoginUser Customer With Username 0153540664 And Password TseTab.ir123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.And("Search Stock Symbol Client  وپست", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("Select Advanced panel type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And(string.Format("Select Time range type Cleint {0}", timerange), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And(string.Format("order the stock symbol IRO1BPST0001 Enter the {0}imum price plus {1} and the {2}i" +
                            "mum number plus {3}  Client", price, plusprice, number, plusnumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.When(string.Format("Error message {0}  And  {1}is displayed", textmessageOutOfRangePrice, textmessageOutOfRangeNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.Then("the result should Buy shares of the Stock symbol", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is not possible to buy from a stock symbol with a price and quantity outside t" +
            "he range")]
        [NUnit.Framework.CategoryAttribute("GotoClient")]
        [NUnit.Framework.CategoryAttribute("LogoutClient")]
        [NUnit.Framework.CategoryAttribute("NotBuy")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.TestCaseAttribute("min", "max", "-1", "1", "انجام و حذف", "قیمت در بازه مجاز نیست", "تعداد در بازه مجاز نیست", null)]
        [NUnit.Framework.TestCaseAttribute("max", "min", "1", "-1", "معتبر تا لغو", "قیمت در بازه مجاز نیست", "تعداد در بازه مجاز نیست", null)]
        public virtual void ItIsNotPossibleToBuyFromAStockSymbolWithAPriceAndQuantityOutsideTheRange(string price, string number, string plusprice, string plusnumber, string timerange, string textmessageOutOfRangePrice, string textmessageOutOfRangeNumber, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GotoClient",
                    "LogoutClient",
                    "NotBuy",
                    "NegativeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("plusprice", plusprice);
            argumentsOfScenario.Add("plusnumber", plusnumber);
            argumentsOfScenario.Add("timerange", timerange);
            argumentsOfScenario.Add("textmessageOutOfRangePrice", textmessageOutOfRangePrice);
            argumentsOfScenario.Add("textmessageOutOfRangeNumber", textmessageOutOfRangeNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is not possible to buy from a stock symbol with a price and quantity outside t" +
                    "he range", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given("LoginUser Customer With Username 0153540664 And Password TseTab.ir123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.And("Search Stock Symbol Client  وپست", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("Select Advanced panel type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And(string.Format("Select Time range type Cleint {0}", timerange), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And(string.Format("order the stock symbol IRO1BPST0001 Enter the {0}imum price plus {1} and the {2}i" +
                            "mum number plus {3}  Client", price, plusprice, number, plusnumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.When(string.Format("Error message {0}  And  {1}is displayed", textmessageOutOfRangePrice, textmessageOutOfRangeNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then("the result should Buy shares of the Stock symbol", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buy stock symbol  with a Stock transaction value")]
        [NUnit.Framework.CategoryAttribute("GotoClient")]
        [NUnit.Framework.CategoryAttribute("LogoutClient")]
        [NUnit.Framework.CategoryAttribute("Buy")]
        [NUnit.Framework.CategoryAttribute("Positivetest")]
        [NUnit.Framework.TestCaseAttribute("min", "0", "روز", "1000000", null)]
        public virtual void BuyStockSymbolWithAStockTransactionValue(string price, string plusprice, string timerange, string transactionvalue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GotoClient",
                    "LogoutClient",
                    "Buy",
                    "Positivetest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("plusprice", plusprice);
            argumentsOfScenario.Add("timerange", timerange);
            argumentsOfScenario.Add("transactionvalue", transactionvalue);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy stock symbol  with a Stock transaction value", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given("LoginUser Customer With Username 0153540664 And Password TseTab.ir123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.And("Search Stock Symbol Client  وپست", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("Select Advanced panel type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And(string.Format("Select Time range type Cleint {0}", timerange), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And(string.Format("Enter the value of the stock exchange transaction {0}", transactionvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And(string.Format("order the stock symbol IRO1BPST0001 Enter the {0}imum price plus {1} Client", price, plusprice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.When("Save stock symbol Buy order Customer information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Then("The result is that the customer must buy the shares of the stock symbol And Show " +
                        "massage سفارش با موفقیت ثبت شد", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
